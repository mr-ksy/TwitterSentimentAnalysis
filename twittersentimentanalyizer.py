# -*- coding: utf-8 -*-
"""TwitterSentimentAnalyizer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0fuD9nH9H5OT4WPVhw8I9xTqgVWK7VM

A python program to get the tweets from twitter using twittwer api and get the sentiment score.
"""

#----------import libraries----------
import tweepy
from textblob import TextBlob
import pandas as pd
import numpy as np
import re
from wordcloud import WordCloud
import matplotlib.pyplot as plt

#----------Sample Twiter api credentials----------
c_key = 'cRjT9hq0hpoHjpCYM9c8XGTQe'
c_secret = '6he7tK6KH4A1oqVqiu3djCgpu1dtCHXijftKoVfIkyGdY2vUWi'
a_key = '740485466382868480-P9COIlo5B3ddDlndomlmWCyd1TvDRW1'
a_secret = 'gUbKMd2tuRJFugGwGZP77gUkxSIHQQoWlcJPiI4jAnk0k'

#----------Authentication objects----------
authenticate =tweepy.OAuthHandler(c_key,c_secret)

authenticate.set_access_token(a_key,a_secret)

#api obj while passing the auth information

api =tweepy.API(authenticate,wait_on_rate_limit=True)

#Extracting post from user

posts= api.user_timeline(screen_name="BillGates", count =100,lang ="en",tweet_mode="extended")

print("show the 5 recent tweets \n")
i=1
for tweet in posts[0:5]:
  print(str(i)+') '+tweet.full_text +'\n')
  i=i+1

#dataframe for tweets
df =pd.DataFrame([tweet.full_text for tweet in posts],columns=['Tweets'])
df.head()

#clean the text
#fn
def cleanTxt(text):
  text= re.sub(r'@[a-zA-Z0-9]+','',text)# removes @
  text= re.sub(r'#','',text)#removes #
  text=re.sub(r'RT[\s]+','',text)#removes RT
  text= re.sub(r'https?:\/\/\S+','',text)#removes url

  return text


df['Tweets']=df['Tweets'].apply(cleanTxt)
df

#create a fn to get the subjectivity

def getSubjectivity(text):
  return TextBlob(text).sentiment.subjectivity

def getPolarity(text):
  return TextBlob(text).sentiment.polarity

#create 2 new columns : subjectivity and polarity 

df['Subjectivity']=df['Tweets'].apply(getSubjectivity)
df['Polarity']=df['Tweets'].apply(getPolarity)

#showing the new dataframes

df

# plot the Word cloud

allwords=' '.join([twts for twts in df['Tweets']])
wordCloud =WordCloud(width = 1100,height=1000,random_state=21,max_font_size=119).generate(allwords)

plt.imshow(wordCloud,interpolation="bilinear")
plt.axis('off')
plt.show()

#create a fun to compute the sentiiment analysis

def getAnalysis(score):
  if score<0:
    return 'Negative'
  elif score==0:
    return 'Neutral'
  else:
    return 'Positive'
  
df['Analysis']=df['Polarity'].apply(getAnalysis)

df

#print all of the positive tweets

j=1
sortedDF= df.sort_values(by=['Polarity'])
for i in range(0,sortedDF.shape[0]):
  if(sortedDF['Analysis'][i]=='Positive'):
    print(str(j)+') '+ sortedDF['Tweets'][i])
    print()
    j=j+1

#print the negative tweets

j=1
sortedDFN=df.sort_values(by=['Polarity'],ascending='False')
for i in range(0,sortedDFN.shape[0]):
  if(sortedDFN['Analysis'][i]=='Negative'):
    print(str(j)+') '+ sortedDFN['Tweets'][i])
    print()
    j=j+1

#Plot the polarity and subjectivity

plt.figure(figsize=(8,6))
for i in range(0,df.shape[0]):
  plt.scatter(df['Polarity'][i],df['Subjectivity'][i],color='Blue')

plt.title('Sentiment Analysis')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

#Get the percentage 
ptweets =df[df.Analysis =='Positive']
ptweets=ptweets['Tweets']

round((ptweets.shape[0]/df.shape[0])*100,1)

#Get the percentage of negative 
ptweets =df[df.Analysis =='Negative']
ptweets=ptweets['Tweets']

round((ptweets.shape[0]/df.shape[0])*100,1)

#Get the percentage of neutral 
ptweets =df[df.Analysis =='Neutral']
ptweets=ptweets['Tweets']

round((ptweets.shape[0]/df.shape[0])*100,1)

#show the count 

df['Analysis'].value_counts()
#plot and visualise the counts

plt.title('Sentiment Analysis')
plt.xlabel('Sentiment')
plt.ylabel('Count')
df['Analysis'].value_counts().plot(kind='bar')
plt.show()

